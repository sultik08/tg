import os
import re
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from dotenv import load_dotenv
import logging

from pathlib import Path
load_dotenv(dotenv_path=Path('.') / '.env')  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å

# –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
print("üîç DEBUG:")
print("API_ID:", repr(os.getenv("API_ID")))
print("API_HASH:", repr(os.getenv("API_HASH")))
print("SESSION_STRING:", repr(os.getenv("SESSION_STRING")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ os.getenv
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API_ID –≤ int, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
if API_ID:
    API_ID = int(API_ID)

# –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
print(f"API_ID: {API_ID}")
print(f"API_HASH: {API_HASH}")
print(f"SESSION_STRING: {SESSION_STRING}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
if not API_ID or not API_HASH or not SESSION_STRING:
    raise ValueError("API_ID, API_HASH –∏–ª–∏ SESSION_STRING –ø—É—Å—Ç—ã–µ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")

GROUP_ID = "@bknmoi"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤–º–µ—Å—Ç–æ ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)

# –°–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π
KEY_PATTERNS = [
    r"(–∏—â—É|–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–∞|–Ω—É–∂–Ω—ã|–∏—â–µ–º|—Ç—Ä–µ–±—É–µ—Ç—Å—è).{0,40}(–∞–¥–º–∏–Ω|–≤ –∞–¥–º–∏–Ω–∫—É|–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é)",
    r"(–∏—â—É|–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–∞|–Ω—É–∂–Ω—ã|–∏—â–µ–º|—Ç—Ä–µ–±—É–µ—Ç—Å—è).{0,40}(–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞|–ø–æ–º–æ—â–Ω–∏–∫|–ø–æ–º–æ—â–Ω–∏–∫–∞|—Ö–µ–ª–ø–µ—Ä)",
    r"(–∏—â—É|–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–∞|–Ω—É–∂–Ω—ã|–∏—â–µ–º|—Ç—Ä–µ–±—É–µ—Ç—Å—è).{0,40}(–Ω–∞ –ø–ª–æ—â–∞–¥–∫—É|–Ω–∞ —Å—ä—ë–º–∫—É|–≤ –∫–æ–º–∞–Ω–¥—É|–Ω–∞ –ø—Ä–æ–µ–∫—Ç)",
    r"(–ø—Ä–æ–¥—é—Å–µ—Ä|–ø—Ä–æ–¥—é—Å–µ—Ä—É).{0,40}(–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–∞–¥–º–∏–Ω)",
]

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def message_matches(message_text: str) -> bool:
    message_text = message_text.lower()
    for pattern in KEY_PATTERNS:
        if re.search(pattern, message_text, re.IGNORECASE):
            return True
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(incoming=True))
async def handler(event):
    try:
        message_text = event.message.message
        if message_matches(message_text):
            await client.send_message(GROUP_ID, f"üîé –ù–∞–π–¥–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è:\n\n{message_text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
client.start()
client.run_until_disconnected()
