import os
import re
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from dotenv import load_dotenv
import logging

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")
OWNER_USERNAME = os.getenv("OWNER_USERNAME")  # –ö—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å
if not API_ID or not API_HASH or not SESSION_STRING:
    raise ValueError("API_ID, API_HASH –∏–ª–∏ SESSION_STRING –ø—É—Å—Ç—ã–µ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)

# –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
KEY_PATTERNS = [
    r"(–∏—â—É|–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–∞|–Ω—É–∂–Ω—ã|–∏—â–µ–º|—Ç—Ä–µ–±—É–µ—Ç—Å—è).{0,40}(–∞–¥–º–∏–Ω|–≤ –∞–¥–º–∏–Ω–∫—É|–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é)",
    r"(–∏—â—É|–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–∞|–Ω—É–∂–Ω—ã|–∏—â–µ–º|—Ç—Ä–µ–±—É–µ—Ç—Å—è).{0,40}(–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞|–ø–æ–º–æ—â–Ω–∏–∫|–ø–æ–º–æ—â–Ω–∏–∫–∞|—Ö–µ–ª–ø–µ—Ä)",
    r"(–∏—â—É|–Ω—É–∂–µ–Ω|–Ω—É–∂–Ω–∞|–Ω—É–∂–Ω—ã|–∏—â–µ–º|—Ç—Ä–µ–±—É–µ—Ç—Å—è).{0,40}(–Ω–∞ –ø–ª–æ—â–∞–¥–∫—É|–Ω–∞ —Å—ä—ë–º–∫—É|–≤ –∫–æ–º–∞–Ω–¥—É|–Ω–∞ –ø—Ä–æ–µ–∫—Ç)",
    r"(–ø—Ä–æ–¥—é—Å–µ—Ä|–ø—Ä–æ–¥—é—Å–µ—Ä—É).{0,40}(–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–∞–¥–º–∏–Ω)",
]

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def message_matches(text):
    text = text.lower()
    for pattern in KEY_PATTERNS:
        if re.search(pattern, text, re.IGNORECASE):
            return True
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async def whoami():
    me = await client.get_me()
    print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏: {me.first_name} (@{me.username})")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(incoming=True))
async def handle_new_message(event):
    try:
        message_text = event.message.message
        if message_matches(message_text):
            await client.send_message(OWNER_USERNAME, f"üîé –ù–∞–π–¥–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è:\n\n{message_text}")
            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    with client:
        client.loop.run_until_complete(whoami())
        client.run_until_disconnected()
